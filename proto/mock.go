// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proto

import (
	"google.golang.org/protobuf/reflect/protoreflect"
	"sync"
)

// Ensure, that DescriptorSourceMock does implement DescriptorSource.
// If this is not the case, regenerate this file with moq.
var _ DescriptorSource = &DescriptorSourceMock{}

// DescriptorSourceMock is a mock implementation of DescriptorSource.
//
//	func TestSomethingThatUsesDescriptorSource(t *testing.T) {
//
//		// make and configure a mocked DescriptorSource
//		mockedDescriptorSource := &DescriptorSourceMock{
//			FindSymbolFunc: func(name string) (protoreflect.Descriptor, error) {
//				panic("mock out the FindSymbol method")
//			},
//			ListServicesFunc: func() ([]string, error) {
//				panic("mock out the ListServices method")
//			},
//		}
//
//		// use mockedDescriptorSource in code that requires DescriptorSource
//		// and then make assertions.
//
//	}
type DescriptorSourceMock struct {
	// FindSymbolFunc mocks the FindSymbol method.
	FindSymbolFunc func(name string) (protoreflect.Descriptor, error)

	// ListServicesFunc mocks the ListServices method.
	ListServicesFunc func() ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindSymbol holds details about calls to the FindSymbol method.
		FindSymbol []struct {
			// Name is the name argument value.
			Name string
		}
		// ListServices holds details about calls to the ListServices method.
		ListServices []struct {
		}
	}
	lockFindSymbol   sync.RWMutex
	lockListServices sync.RWMutex
}

// FindSymbol calls FindSymbolFunc.
func (mock *DescriptorSourceMock) FindSymbol(name string) (protoreflect.Descriptor, error) {
	if mock.FindSymbolFunc == nil {
		panic("DescriptorSourceMock.FindSymbolFunc: method is nil but DescriptorSource.FindSymbol was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockFindSymbol.Lock()
	mock.calls.FindSymbol = append(mock.calls.FindSymbol, callInfo)
	mock.lockFindSymbol.Unlock()
	return mock.FindSymbolFunc(name)
}

// FindSymbolCalls gets all the calls that were made to FindSymbol.
// Check the length with:
//
//	len(mockedDescriptorSource.FindSymbolCalls())
func (mock *DescriptorSourceMock) FindSymbolCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockFindSymbol.RLock()
	calls = mock.calls.FindSymbol
	mock.lockFindSymbol.RUnlock()
	return calls
}

// ListServices calls ListServicesFunc.
func (mock *DescriptorSourceMock) ListServices() ([]string, error) {
	if mock.ListServicesFunc == nil {
		panic("DescriptorSourceMock.ListServicesFunc: method is nil but DescriptorSource.ListServices was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListServices.Lock()
	mock.calls.ListServices = append(mock.calls.ListServices, callInfo)
	mock.lockListServices.Unlock()
	return mock.ListServicesFunc()
}

// ListServicesCalls gets all the calls that were made to ListServices.
// Check the length with:
//
//	len(mockedDescriptorSource.ListServicesCalls())
func (mock *DescriptorSourceMock) ListServicesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListServices.RLock()
	calls = mock.calls.ListServices
	mock.lockListServices.RUnlock()
	return calls
}
